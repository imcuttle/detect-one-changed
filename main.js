!function(e){function t(t){for(var r,s,a=t[0],l=t[1],c=t[2],u=0,p=[];u<a.length;u++)s=a[u],o[s]&&p.push(o[s][0]),o[s]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(d&&d(t);p.length;)p.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,a=1;a<n.length;a++){var l=n[a];0!==o[l]&&(r=!1)}r&&(i.splice(t--,1),e=s(s.s=n[0]))}return e}var r={},o={0:0},i=[];function s(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=r,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(n,r,function(t){return e[t]}.bind(null,r));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="";var a=window.webpackJsonp=window.webpackJsonp||[],l=a.push.bind(a);a.push=t,a=a.slice();for(var c=0;c<a.length;c++)t(a[c]);var d=l;i.push([183,1,2]),n()}({183:function(e,t,n){"use strict";var r=function(e){return e&&e.__esModule?e:{default:e}}(n(184));var o=n(84)().use(n(301)).use(n(497)),i=n(544),s=n(545),a=s.parse,l=s.stringify,c=n(548),d=n(549),u=d.compress,p=d.decompress,m=n(552),h=m.name,f=m.version;n(553);var g=n(558).detectMarkdown,v=n(646),y=document.querySelector(".input-body textarea"),b=a(location.search.slice(1));y.value=b.md?p(b.md):v;var w=b.old||y.value;function k(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:y.value,t=g(w,e,{wrapType:"ast"});console.log("=== detected ==="),console.log(t);var n=t.ast,i=o.stringify(o.runSync(n));w=e,document.querySelector(".markdown-body").innerHTML=i;var s=[].concat((0,r.default)(document.querySelectorAll(".detected-updated"))).pop();s&&s.scrollIntoView({behavior:"smooth"})}function x(){var e={md:v===y.value?void 0:u(y.value)};return location.href.replace(/\?[^?]+?$/,"")+"?"+l(e)}k(),y.addEventListener("input",i(function(e){k(e.target.value)},300)),document.querySelector("#copy-link").addEventListener("click",function(){c(x()),alert("Copied!")}),document.querySelector("#version").textContent=h+" "+f,document.querySelector("#new-issue").addEventListener("click",function(){var e="\n  **"+h+" "+f+"**\n[Live link]("+x()+")\n\n**Input:**\n~~~~markdown\n"+y.value+"\n~~~~\n\n**Expected behavior:**\n  ";window.open("https://github.com/imcuttle/"+h+"/issues/new?body="+encodeURIComponent(e))})},552:function(e){e.exports={name:"detect-one-changed",version:"2.1.2",main:"index.js",description:"Detect first changed html and markdown between old text and the new",author:"imcuttle <moyuyc95@gmail.com>",scripts:{test:"jest","build:css":"postcss style/index.css -o style.css","build:browser":"cd examples/browser && npm run build",prepare:"npm run build:css",prepublishOnly:"npm test",toc:"markdown-toc --maxdepth=2 -i README.md && git add README.md",doc:'documentation --markdown-toc=true -q --readme-file=docs/api.md readme index.js -a public -s "API" && prettier docs/api.md --write && git add docs/api.md',version:"npm run doc && npm run toc && npm run changelog",changelog:"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 && git add CHANGELOG.md"},husky:{hooks:{"pre-commit":"pretty-quick --staged","commit-msg":"commitlint -e $HUSKY_GIT_PARAMS"}},sideEffects:!1,engines:{node:">=6"},keywords:["imcuttle","detect","one","changed","detect-one-changed","markdown","html","diff","preview","hmr","highlight","hot","remark","rehype","mdx"],typings:"index.d.ts",license:"MIT",repository:"imcuttle/detect-one-changed",jest:{testMatch:["**/__test{s,}__/*.(spec|test).{t,j}s{x,}"]},commitlint:{extends:["@commitlint/config-conventional"]},devDependencies:{"@commitlint/cli":"^7.2.1","@commitlint/config-conventional":"^7.1.2","@mdx-js/mdx":"^0.15.6","@types/jest":"^23.3.8",autoprefixer:"^9.3.1","babel-loader":"^7.1.5","babel-plugin-transform-object-rest-spread":"^6.26.0","babel-plugin-transform-runtime":"^6.23.0","babel-preset-env":"^1.7.0","conventional-changelog-cli":"^2.0.5","copy-text-to-clipboard":"^1.0.4","css-loader":"^1.0.1",cssnano:"^4.1.7",documentation:"^8.1.2","friendly-errors-webpack-plugin":"^1.7.0","html-webpack-plugin":"^3.2.0",husky:"^1.1.2",jest:"^23.6.0",less:"^3.8.1","lodash.debounce":"^4.0.8",lzbase62:"^1.4.9","memory-fs":"^0.4.1","mini-css-extract-plugin":"^0.4.4",postcss:"^7.0.5","postcss-cli":"^6.0.1","postcss-less":"^3.0.2","postcss-loader":"^3.0.0",precss:"^3.1.2",prettier:"^1.14.3","pretty-quick":"^1.8.0","raw-loader":"^0.5.1","remark-html":"^8.0.0","remark-preset-gfm":"^1.0.1","style-loader":"^0.23.1",webpack:"^4.23.1","webpack-cli":"^3.1.2","webpack-dev-server":"^3.1.10"},dependencies:{"@moyuyc/visit-tree":"^2.0.1","detect-tree-changed":"^1.2.4","is-plain-obj":"^1.1.0","loader-utils":"^1.1.0","lodash.clonedeep":"^4.5.0","lodash.isequalwith":"^4.4.0",rehype:"^6.0.0",remark:"^10.0.0"}}},558:function(e,t,n){"use strict";e.exports=n(559)},559:function(e,t,n){"use strict";var r=s(n(560)),o=s(n(577)),i=s(n(581));function s(e){return e&&e.__esModule?e:{default:e}}var a=n(88),l=n(588),c=n(590),d=n(594),u=l;function p(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.reverse,s=void 0===r||r,a=n.equal,l=void 0===a?u:a;s&&(d(e),d(t));var p=c(t,e,{limit:1,equal:function(e,t){return l((0,o.default)({},e,{position:null}),(0,o.default)({},t,{position:null}))}}),m=(0,i.default)(p,1)[0];return m?{node:m[0],parents:m[1].ctx.parents,paths:m[1].ctx.paths}:null}function m(e){return["text","emphasis","strong","delete","inlineCode","break","link"].includes(e)}e.exports={reverseAST:d,detectAst:p,detectHtml:function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=o.ast,s=void 0===i||i,l=o.text,c=void 0===l||l,u=o.reverse,m=void 0===u||u,h=o.position,f=void 0===h||h,g=o.style,v=void 0===g?"":g,y=o.className,b=void 0===y?"detected-updated":y,w=o.rehype,k=void 0===w?n(597)():w,x=o.equal;if("string"!=typeof e&&!a(e))throw new TypeError("`oldHtml` is required type of string or plain object, but "+(void 0===e?"undefined":(0,r.default)(e)));if("string"!=typeof t&&!a(t))throw new TypeError("`newHtml` is required type of string or plain object, but "+(void 0===t?"undefined":(0,r.default)(t)));try{k=k.use({settings:{position:f,fragment:!0}}).freeze()}catch(e){}if(t===e)return{state:null,node:null,text:c?t:null,ast:s?"string"==typeof e?k.parse(e):e:null};var q="string"==typeof e?k.parse(e):e,j="string"==typeof t?k.parse(t):t,M=p(q,j,{reverse:m,equal:x}),A=void 0;if(M&&(A=M.node)){for(var S=0;A&&"text"===A.type;)A=M.parents[M.parents.length-1-S],S++;if(A){var T=A.properties=A.properties||{};b&&(T.className=[b].concat(T.className).filter(Boolean)),v&&(T.style=[v].concat(T.style).filter(Boolean).join(" "))}}return m&&d(j),{text:c?k.stringify(j):null,ast:s?j:null,state:M,node:A}},detectMarkdown:function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=o.wrapTag,s=void 0===i?"div":i,l=o.wrapType,c=void 0===l?"html":l,u=o.ast,h=void 0===u||u,f=o.text,g=void 0===f||f,v=o.reverse,y=void 0===v||v,b=o.style,w=void 0===b?"":b,k=o.className,x=void 0===k?"detected-updated":k,q=o.position,j=void 0===q||q,M=o.remark,A=void 0===M?n(84)():M,S=o.equal;if("string"!=typeof e&&!a(e))throw new TypeError("`oldMarkdown` is required type of string or plain object, but "+(void 0===e?"undefined":(0,r.default)(e)));if("string"!=typeof t&&!a(t))throw new TypeError("`newMarkdown` is required type of string or plain object, but "+(void 0===t?"undefined":(0,r.default)(t)));try{A=A.use({settings:{position:j}}).freeze()}catch(e){}if(t===e)return{state:null,node:null,text:g?t:null,ast:h?"string"==typeof t?A.parse(t):t:null};var T="string"==typeof e?A.parse(e):e,I="string"==typeof t?A.parse(t):t,P=p(T,I,{reverse:y,equal:S}),_=void 0;if(P){_=P.node;var C=P.parents;if(_){for(var E=0,O=function(){return C[C.length-1-++E]},N=C[C.length-1-E];["html","ast"].includes(c)&&_&&"text"===_.type;)_=N,N=O(),"ast"===c&&N&&"listItem"===N.type&&(_=N,N=O());for(;"ast"===c&&_&&"html"===_.type;)_=N,N=O();for(;"html"===c&&_&&"image"===_.type;)_=N,N=O();for(;"html"===c&&_&&m(_.type)&&C.slice(0,C.length-E).reverse().findIndex(function(e){return"listItem"===e.type})>=0;)_=N,N=O();for(;["html"].includes(c)&&_&&"listItem"===_.type;)N=_,_=y?_.children[_.children.length-1]:_.children[0];if(_){var H=(N&&N.children||[]).indexOf(_);if(H>=0)if("ast"===c){var L=_.data=_.data||{},D=L.hProperties=L.hProperties||{};x&&(D.className=[x].concat(D.className).filter(Boolean)),w&&(D.style=[w,D.style].filter(Boolean).join(" "))}else if("html"===c){var G="<"+s+' class="'+(x||"")+'" style="'+(w||"")+'">',U="</"+s+">";if(_&&"tableCell"===_.type)_.children=[{type:"html",value:G}].concat(_.children||[]).concat({type:"html",value:U});else{var B=N.children[H+(y?-1:1)],R={type:"html",value:U+(B&&"list"===B.type?"\n":"")};!function(e,t){y?(N.children.splice(H+1,0,e),N.children.splice(H,0,t)):(N.children.splice(H+1,0,t),N.children.splice(H,0,e))}({type:"html",value:G+(!_.children||_.children.every(function(e){return"text"===e.type})||"listItem"!==N.type?"":"\n")},R)}}}}}return y&&d(I),{text:g?A.stringify(I):null,ast:h?I:null,state:P,node:_}},defaultEqual:u}},594:function(e,t,n){"use strict";var r=n(595);e.exports=function(e){return e?(r(e,function(e){e&&e.children&&Array.isArray(e.children)&&(e.children=e.children.reverse())}),e):e}},646:function(e,t){e.exports="# detect-one-changed\n\n[![Build status](https://img.shields.io/travis/imcuttle/detect-one-changed/master.svg?style=flat-square)](https://travis-ci.org/imcuttle/detect-one-changed)\n[![Test coverage](https://img.shields.io/codecov/c/github/imcuttle/detect-one-changed.svg?style=flat-square)](https://codecov.io/github/imcuttle/detect-one-changed?branch=master)\n[![NPM version](https://img.shields.io/npm/v/detect-one-changed.svg?style=flat-square)](https://www.npmjs.com/package/detect-one-changed)\n[![NPM Downloads](https://img.shields.io/npm/dm/detect-one-changed.svg?style=flat-square&maxAge=43200)](https://www.npmjs.com/package/detect-one-changed)\n[![Prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://prettier.io/)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg?style=flat-square)](https://conventionalcommits.org)\n\n> Detect first changed html and markdown between old text and new\n\n## Table of Contents\n\n\x3c!-- toc --\x3e\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [API](#api)\n- [Contributing](#contributing)\n- [Authors](#authors)\n- [License](#license)\n\n\x3c!-- tocstop --\x3e\n\n## Installation\n\n```bash\nnpm install detect-one-changed\n# or use yarn\nyarn add detect-one-changed\n```\n\n## Usage\n\n### Use it as an package\n\n```javascript\nconst { detectMarkdown } = require('detect-one-changed')\n\ndetectMarkdown('abcd\\n\\n# old', 'abcd\\n\\n# new').text\n// => 'abcd\\n\\n<p class=\"detected-updated\" style=\"\">\\n\\n# new\\n\\n</p>\\n'\n```\n\n```javascript\nconst { detectMarkdown } = require('detect-one-changed')\nconst remark = require('remark')\nconst html = require('remark-html')\n\nremark()\n  .use(html)\n  .stringify(detectMarkdown('abcd\\n\\n# old', 'abcd\\n\\n# new', { wrapType: 'ast' }).ast)\n// => '<p>abcd</p>\\n<h1 class=\"detected-updated\">new</h1>\\n'\n```\n\n```javascript\nconst { detectHtml } = require('detect-one-changed')\n\ndetectHtml('<p>old</p>', '<p class=\"new-cls\">new</p>').text\n// => '<p class=\"detected-updated new-cls\">new</p>'\n```\n\n### Use it as webpack loader\n\nMore information please see [webpack example](./examples/webpack)\n\n```\nconst\n```\n\n## API\n\n[See API](./docs/api.md)\n\n## Related\n\n- [live-markd](https://github.com/imcuttle/live-markd) - 📝Github Favorite Markdown preview with live rendering & location and highlight changed block.\n\n## Contributing\n\n- Fork it!\n- Create your new branch:  \n  `git checkout -b feature-new` or `git checkout -b fix-which-bug`\n- Start your magic work now\n- Make sure npm test passes\n- Commit your changes:  \n  `git commit -am 'feat: some description (close #123)'` or `git commit -am 'fix: some description (fix #123)'`\n- Push to the branch: `git push`\n- Submit a pull request :)\n\n## Authors\n\nThis library is written and maintained by imcuttle, <a href=\"mailto:moyuyc95@gmail.com\">moyuyc95@gmail.com</a>.\n\n## License\n\nMIT - [imcuttle](https://github.com/imcuttle) 🐟\n"}});
//# sourceMappingURL=main.js.map